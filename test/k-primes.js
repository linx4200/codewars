const expect = require('chai').expect
const { countKprimes } = require('../kata/k-primes')

describe('k-primes basic tests', () => {
  it('countKprimes 2, 0, 100', () => {
    expect(countKprimes(2, 0, 100)).to.be.eql([4, 6, 9, 10, 14, 15, 21, 22, 25, 26, 33, 34, 35, 38, 39, 46, 49, 51, 55, 57, 58, 62, 65, 69, 74, 77, 82, 85, 86, 87, 91, 93, 94, 95])
  })
  it('countKprimes 3, 0, 100', () => {
    expect(countKprimes(3, 0, 100)).to.be.eql([8, 12, 18, 20, 27, 28, 30, 42, 44, 45, 50, 52, 63, 66, 68, 70, 75, 76, 78, 92, 98, 99])
  })
  it('countKprimes 5, 1000, 1100', () => {
    expect(countKprimes(5, 1000, 1100)).to.be.eql([1020, 1026, 1032, 1044, 1050, 1053, 1064, 1072, 1092, 1100])
  })
  it('countKprimes 2, 500, 600', () => {
    expect(countKprimes(5, 500, 600)).to.be.eql([500, 520, 552, 567, 588, 592, 594])
  })
  it('countKprimes 7, 1000, 1500', () => {
    expect(countKprimes(7, 1000, 1500)).to.be.eql([1008, 1056, 1080, 1088, 1120, 1200, 1216, 1248, 1458, 1472])
  })
  it('countKprimes 7, 10000, 10100', () => {
    expect(countKprimes(7, 10000, 10100)).to.be.eql([10032, 10044, 10048])
  })
  it('countKprimes 7, 100000, 100100', () => {
    expect(countKprimes(7, 100000, 100100)).to.be.eql([100008, 100016, 100035, 100048, 100064, 100100])
  })
  it('countKprimes 12, 100000, 100100', () => {
    expect(countKprimes(12, 100000, 100100)).to.be.eql([])
  })
  it('countKprimes 1, 2, 30', () => {
    countKprimes(1, 2, 30)
    // expect(countKprimes(1, 2, 30)).to.be.eql([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])
  })
  it('countKprimes 8, 10000000, 10000200', () => {
    expect(countKprimes(8, 10000000, 10000200)).to.be.eql([10000096, 10000152, 10000165, 10000200])
  })
  // it('countKprimes 4 6400528, 6400952', () => {
  //   expect(countKprimes(4, 6400528, 6400952)).to.be.eql([6400534, 6400540, 6400546, 6400551, 6400554, 6400555, 6400578, 6400585, 6400588, 6400601, 6400604, 6400606, 6400614, 6400615, 6400616, 6400618, 6400626, 6400630, 6400638, 6400641, 6400652, 6400653, 6400654, 6400658, 6400659, 6400664, 6400665, 6400667, 6400668, 6400675, 6400676, 6400682, 6400684, 6400686, 6400698, 6400712, 6400713, 6400722, 6400723, 6400724, 6400732, 6400735, 6400737, 6400738, 6400739, 6400742, 6400762, 6400765, 6400770, 6400773, 6400778, 6400780, 6400785, 6400786, 6400788, 6400790, 6400794, 6400796, 6400797, 6400806, 6400809, 6400820, 6400821, 6400823, 6400827, 6400828, 6400830, 6400834, 6400835, 6400849, 6400877, 6400894, 6400898, 6400899, 6400904, 6400905, 6400911, 6400917, 6400922, 6400924, 6400925, 6400930, 6400933, 6400936, 6400938, 6400942, 6400946, 6400948, 6400952])
  // })
  it('countKprimes 5, 7751949, 7752483', () => {
    expect(countKprimes(5, 7751949, 7752483)).to.be.eql([ 7751950, 7751954, 7751960, 7751961, 7751964, 7751966, 7751975, 7751976, 7751980, 7751986, 7751996, 7752006, 7752010, 7752012, 7752015, 7752020, 7752034, 7752038, 7752042, 7752050, 7752051, 7752052, 7752066, 7752069, 7752072, 7752075, 7752084, 7752100, 7752104, 7752129, 7752135, 7752143, 7752152, 7752162, 7752164, 7752170, 7752184, 7752195, 7752206, 7752212, 7752213, 7752216, 7752220, 7752222, 7752225, 7752232, 7752246, 7752248, 7752252, 7752258, 7752267, 7752270, 7752285, 7752303, 7752308, 7752316, 7752318, 7752325, 7752330, 7752338, 7752339, 7752342, 7752344, 7752356, 7752357, 7752364, 7752366, 7752372, 7752376, 7752381, 7752396, 7752424, 7752426, 7752437, 7752440, 7752450, 7752459, 7752462, 7752465, 7752474, 7752475, 7752476, 7752483 ])
  })
  it('countKprimes 7, 5055093, 5055405', () => {
    expect(countKprimes(7, 5055093, 5055405)).to.be.eql([ 5055102, 5055129, 5055136, 5055138, 5055192, 5055240, 5055280, 5055296, 5055328, 5055330, 5055375, 5055392 ])
  })
})
